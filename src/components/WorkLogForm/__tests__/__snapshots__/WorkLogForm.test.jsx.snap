// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rendering renders correctly with all props 1`] = `
<Modal
  actions={
    Array [
      Object {
        "clickHandler": [Function],
        "label": "general:action.save",
        "loading": false,
      },
    ]
  }
  closeHandler={[Function]}
  title="workLog:modal.add.title"
>
  <p
    style={
      Object {
        "color": "#a32100",
        "textAlign": "center",
      }
    }
  />
  <form>
    <fieldset
      style={
        Object {
          "borderStyle": "none",
          "marginLeft": "auto",
          "marginRight": "auto",
          "maxWidth": "17em",
          "padding": "0",
        }
      }
    >
      <div
        style={
          Object {
            "display": "inline-block",
          }
        }
      >
        <p
          style={
            Object {
              "color": "#666",
              "fontSize": "0.75rem",
              "textAlign": "block",
            }
          }
        >
          workLog:modal.add.alreadySendForApprovalDescription
        </p>
      </div>
    </fieldset>
    <fieldset
      style={
        Object {
          "borderStyle": "none",
          "marginLeft": "auto",
          "marginRight": "auto",
          "maxWidth": "17em",
          "padding": "0",
        }
      }
    >
      <legend>
        workLog:element.date
      </legend>
      <div
        style={
          Object {
            "display": "inline-block",
          }
        }
      >
        <TextField
          changeHandler={null}
          description={null}
          disabled={true}
          error={null}
          fieldId="date"
          isLabelVisible={false}
          label="workLog:element.date"
          placeholder={null}
          required={false}
          type="text"
          value="1. 1. 2018"
        />
      </div>
    </fieldset>
    <fieldset
      style={
        Object {
          "borderStyle": "none",
          "marginLeft": "auto",
          "marginRight": "auto",
          "maxWidth": "17em",
          "padding": "0",
        }
      }
    >
      <legend>
        workLog:element.type
      </legend>
      <div
        style={
          Object {
            "display": "inline-block",
          }
        }
      >
        <SelectField
          changeHandler={[Function]}
          description={null}
          disabled={false}
          error={null}
          fieldId="type"
          isLabelVisible={false}
          label="workLog:element.type"
          options={
            Array [
              Object {
                "label": "workMonth:constant.type.workLog",
                "value": "WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.businessTripWorkLog",
                "value": "BUSINESS_TRIP_WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.homeOfficeWorkLog",
                "value": "HOME_OFFICE_WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.overtimeWorkLog",
                "value": "OVERTIME_WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.sickDayWorkLog",
                "value": "SICK_DAY_WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.timeOffWorkLog",
                "value": "TIME_OFF_WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.vacationWorkLog",
                "value": "VACATION_WORK_LOG",
              },
            ]
          }
          required={false}
          value="WORK_LOG"
        />
      </div>
    </fieldset>
    <React.Fragment>
      <fieldset
        style={
          Object {
            "borderStyle": "none",
            "marginLeft": "auto",
            "marginRight": "auto",
            "maxWidth": "17em",
            "padding": "0",
          }
        }
      >
        <legend>
          workLog:element.startTime
        </legend>
        <div>
          <div
            style={
              Object {
                "display": "inline-block",
              }
            }
          >
            <TextField
              autoFocus={true}
              changeHandler={[Function]}
              description={null}
              disabled={false}
              error={null}
              fieldId="startHour"
              isLabelVisible={false}
              label="workLog:element.startHour"
              placeholder={null}
              required={false}
              type="text"
              value="00"
            />
          </div>
          :
          <div
            style={
              Object {
                "display": "inline-block",
              }
            }
          >
            <TextField
              changeHandler={[Function]}
              description={null}
              disabled={false}
              error={null}
              fieldId="startMinute"
              isLabelVisible={false}
              label="workLog:element.startMinute"
              placeholder={null}
              required={false}
              type="text"
              value="57"
            />
          </div>
           h
        </div>
      </fieldset>
      <fieldset
        style={
          Object {
            "borderStyle": "none",
            "marginLeft": "auto",
            "marginRight": "auto",
            "maxWidth": "17em",
            "padding": "0",
          }
        }
      >
        <legend>
          workLog:element.endTime
        </legend>
        <div>
          <div
            style={
              Object {
                "display": "inline-block",
              }
            }
          >
            <TextField
              changeHandler={[Function]}
              description={null}
              disabled={false}
              error={null}
              fieldId="endHour"
              isLabelVisible={false}
              label="workLog:element.endHour"
              placeholder={null}
              required={false}
              type="text"
              value="01"
            />
          </div>
          :
          <div
            style={
              Object {
                "display": "inline-block",
              }
            }
          >
            <TextField
              changeHandler={[Function]}
              description={null}
              disabled={false}
              error={null}
              fieldId="endMinute"
              isLabelVisible={false}
              label="workLog:element.endMinute"
              placeholder={null}
              required={false}
              type="text"
              value="03"
            />
          </div>
           h
        </div>
      </fieldset>
    </React.Fragment>
  </form>
</Modal>
`;

exports[`rendering renders correctly with mandatory props 1`] = `
<Modal
  actions={
    Array [
      Object {
        "clickHandler": [Function],
        "label": "general:action.save",
        "loading": false,
      },
    ]
  }
  closeHandler={[Function]}
  title="workLog:modal.add.title"
>
  <p
    style={
      Object {
        "color": "#a32100",
        "textAlign": "center",
      }
    }
  />
  <form>
    <fieldset
      style={
        Object {
          "borderStyle": "none",
          "marginLeft": "auto",
          "marginRight": "auto",
          "maxWidth": "17em",
          "padding": "0",
        }
      }
    >
      <legend>
        workLog:element.date
      </legend>
      <div
        style={
          Object {
            "display": "inline-block",
          }
        }
      >
        <TextField
          changeHandler={null}
          description={null}
          disabled={true}
          error={null}
          fieldId="date"
          isLabelVisible={false}
          label="workLog:element.date"
          placeholder={null}
          required={false}
          type="text"
          value="1. 1. 2018"
        />
      </div>
    </fieldset>
    <fieldset
      style={
        Object {
          "borderStyle": "none",
          "marginLeft": "auto",
          "marginRight": "auto",
          "maxWidth": "17em",
          "padding": "0",
        }
      }
    >
      <legend>
        workLog:element.type
      </legend>
      <div
        style={
          Object {
            "display": "inline-block",
          }
        }
      >
        <SelectField
          changeHandler={[Function]}
          description={null}
          disabled={false}
          error={null}
          fieldId="type"
          isLabelVisible={false}
          label="workLog:element.type"
          options={
            Array [
              Object {
                "label": "workMonth:constant.type.workLog",
                "value": "WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.businessTripWorkLog",
                "value": "BUSINESS_TRIP_WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.homeOfficeWorkLog",
                "value": "HOME_OFFICE_WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.overtimeWorkLog",
                "value": "OVERTIME_WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.sickDayWorkLog",
                "value": "SICK_DAY_WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.timeOffWorkLog",
                "value": "TIME_OFF_WORK_LOG",
              },
              Object {
                "label": "workMonth:constant.type.vacationWorkLog",
                "value": "VACATION_WORK_LOG",
              },
            ]
          }
          required={false}
          value="WORK_LOG"
        />
      </div>
    </fieldset>
    <React.Fragment>
      <fieldset
        style={
          Object {
            "borderStyle": "none",
            "marginLeft": "auto",
            "marginRight": "auto",
            "maxWidth": "17em",
            "padding": "0",
          }
        }
      >
        <legend>
          workLog:element.startTime
        </legend>
        <div>
          <div
            style={
              Object {
                "display": "inline-block",
              }
            }
          >
            <TextField
              autoFocus={true}
              changeHandler={[Function]}
              description={null}
              disabled={false}
              error={null}
              fieldId="startHour"
              isLabelVisible={false}
              label="workLog:element.startHour"
              placeholder={null}
              required={false}
              type="text"
              value="00"
            />
          </div>
          :
          <div
            style={
              Object {
                "display": "inline-block",
              }
            }
          >
            <TextField
              changeHandler={[Function]}
              description={null}
              disabled={false}
              error={null}
              fieldId="startMinute"
              isLabelVisible={false}
              label="workLog:element.startMinute"
              placeholder={null}
              required={false}
              type="text"
              value="57"
            />
          </div>
           h
        </div>
      </fieldset>
      <fieldset
        style={
          Object {
            "borderStyle": "none",
            "marginLeft": "auto",
            "marginRight": "auto",
            "maxWidth": "17em",
            "padding": "0",
          }
        }
      >
        <legend>
          workLog:element.endTime
        </legend>
        <div>
          <div
            style={
              Object {
                "display": "inline-block",
              }
            }
          >
            <TextField
              changeHandler={[Function]}
              description={null}
              disabled={false}
              error={null}
              fieldId="endHour"
              isLabelVisible={false}
              label="workLog:element.endHour"
              placeholder={null}
              required={false}
              type="text"
              value="01"
            />
          </div>
          :
          <div
            style={
              Object {
                "display": "inline-block",
              }
            }
          >
            <TextField
              changeHandler={[Function]}
              description={null}
              disabled={false}
              error={null}
              fieldId="endMinute"
              isLabelVisible={false}
              label="workLog:element.endMinute"
              placeholder={null}
              required={false}
              type="text"
              value="03"
            />
          </div>
           h
        </div>
      </fieldset>
    </React.Fragment>
  </form>
</Modal>
`;
